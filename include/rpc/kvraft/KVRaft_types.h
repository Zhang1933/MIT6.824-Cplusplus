/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KVRaft_TYPES_H
#define KVRaft_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct ErrorCode {
  enum type {
    SUCCEED = 0,
    ERR_REQUEST_FAILD = 1,
    ERR_NO_KEY = 2,
    ERR_WRONG_LEADER = 3,
    ERR_NO_SHARD = 4,
    ERR_INVALID_SHARD = 5,
    ERR_NO_SUCH_SHARD_CONFIG = 6,
    ERR_NOT_SUPPORT_OPERATOR = 7,
    ERR_NO_SUCH_GROUP = 8,
    ERR_SHARD_MIGRATING = 9,
    ERR_SHARD_STOP = 10
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ErrorCode::type& val);

std::string to_string(const ErrorCode::type& val);

struct ShardStatus {
  enum type {
    SERVERING = 0,
    PULLING = 1,
    PUSHING = 2,
    STOP = 3
  };
};

extern const std::map<int, const char*> _ShardStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ShardStatus::type& val);

std::string to_string(const ShardStatus::type& val);

struct ServerState {
  enum type {
    FOLLOWER = 0,
    CANDIDAE = 1,
    LEADER = 2
  };
};

extern const std::map<int, const char*> _ServerState_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ServerState::type& val);

std::string to_string(const ServerState::type& val);

struct PutOp {
  enum type {
    PUT = 0,
    APPEND = 1
  };
};

extern const std::map<int, const char*> _PutOp_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PutOp::type& val);

std::string to_string(const PutOp::type& val);

typedef int32_t TermId;

typedef int32_t LogId;

typedef int32_t GID;

typedef int32_t ShardId;

class Host;

class RequestVoteParams;

class RequestVoteResult;

class LogEntry;

class AppendEntriesParams;

class AppendEntriesResult;

class RaftState;

class StartResult;

class PutAppendParams;

class PutAppendReply;

class GetParams;

class GetReply;

class InstallSnapshotParams;

class JoinArgs;

class JoinReply;

class LeaveArgs;

class LeaveReply;

class MoveArgs;

class MoveReply;

class QueryArgs;

class Config;

class QueryReply;

class PullShardParams;

class PullShardReply;

typedef struct _Host__isset {
  _Host__isset() : ip(false), port(false) {}
  bool ip :1;
  bool port :1;
} _Host__isset;

class Host : public virtual ::apache::thrift::TBase {
 public:

  Host(const Host&);
  Host& operator=(const Host&);
  Host() noexcept
       : ip(),
         port(0) {
  }

  virtual ~Host() noexcept;
  std::string ip;
  int16_t port;

  _Host__isset __isset;

  void __set_ip(const std::string& val);

  void __set_port(const int16_t val);

  bool operator == (const Host & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const Host &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Host & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Host &a, Host &b);

std::ostream& operator<<(std::ostream& out, const Host& obj);

typedef struct _RequestVoteParams__isset {
  _RequestVoteParams__isset() : term(false), candidateId(false), lastLogIndex(false), LastLogTerm(false), gid(false) {}
  bool term :1;
  bool candidateId :1;
  bool lastLogIndex :1;
  bool LastLogTerm :1;
  bool gid :1;
} _RequestVoteParams__isset;

class RequestVoteParams : public virtual ::apache::thrift::TBase {
 public:

  RequestVoteParams(const RequestVoteParams&);
  RequestVoteParams& operator=(const RequestVoteParams&);
  RequestVoteParams() noexcept
                    : term(0),
                      lastLogIndex(0),
                      LastLogTerm(0),
                      gid(0) {
  }

  virtual ~RequestVoteParams() noexcept;
  TermId term;
  Host candidateId;
  LogId lastLogIndex;
  TermId LastLogTerm;
  GID gid;

  _RequestVoteParams__isset __isset;

  void __set_term(const TermId val);

  void __set_candidateId(const Host& val);

  void __set_lastLogIndex(const LogId val);

  void __set_LastLogTerm(const TermId val);

  void __set_gid(const GID val);

  bool operator == (const RequestVoteParams & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(candidateId == rhs.candidateId))
      return false;
    if (!(lastLogIndex == rhs.lastLogIndex))
      return false;
    if (!(LastLogTerm == rhs.LastLogTerm))
      return false;
    if (!(gid == rhs.gid))
      return false;
    return true;
  }
  bool operator != (const RequestVoteParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestVoteParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestVoteParams &a, RequestVoteParams &b);

std::ostream& operator<<(std::ostream& out, const RequestVoteParams& obj);

typedef struct _RequestVoteResult__isset {
  _RequestVoteResult__isset() : term(false), voteGranted(false), code(false) {}
  bool term :1;
  bool voteGranted :1;
  bool code :1;
} _RequestVoteResult__isset;

class RequestVoteResult : public virtual ::apache::thrift::TBase {
 public:

  RequestVoteResult(const RequestVoteResult&) noexcept;
  RequestVoteResult& operator=(const RequestVoteResult&) noexcept;
  RequestVoteResult() noexcept
                    : term(0),
                      voteGranted(0),
                      code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~RequestVoteResult() noexcept;
  TermId term;
  bool voteGranted;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _RequestVoteResult__isset __isset;

  void __set_term(const TermId val);

  void __set_voteGranted(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const RequestVoteResult & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(voteGranted == rhs.voteGranted))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const RequestVoteResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestVoteResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RequestVoteResult &a, RequestVoteResult &b);

std::ostream& operator<<(std::ostream& out, const RequestVoteResult& obj);

typedef struct _LogEntry__isset {
  _LogEntry__isset() : term(false), command(false), index(false) {}
  bool term :1;
  bool command :1;
  bool index :1;
} _LogEntry__isset;

class LogEntry : public virtual ::apache::thrift::TBase {
 public:

  LogEntry(const LogEntry&);
  LogEntry& operator=(const LogEntry&);
  LogEntry() noexcept
           : term(0),
             command(),
             index(0) {
  }

  virtual ~LogEntry() noexcept;
  TermId term;
  std::string command;
  LogId index;

  _LogEntry__isset __isset;

  void __set_term(const TermId val);

  void __set_command(const std::string& val);

  void __set_index(const LogId val);

  bool operator == (const LogEntry & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(command == rhs.command))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const LogEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LogEntry &a, LogEntry &b);

std::ostream& operator<<(std::ostream& out, const LogEntry& obj);

typedef struct _AppendEntriesParams__isset {
  _AppendEntriesParams__isset() : term(false), leaderId(false), prevLogIndex(false), prevLogTerm(false), entries(false), leaderCommit(false), gid(false) {}
  bool term :1;
  bool leaderId :1;
  bool prevLogIndex :1;
  bool prevLogTerm :1;
  bool entries :1;
  bool leaderCommit :1;
  bool gid :1;
} _AppendEntriesParams__isset;

class AppendEntriesParams : public virtual ::apache::thrift::TBase {
 public:

  AppendEntriesParams(const AppendEntriesParams&);
  AppendEntriesParams& operator=(const AppendEntriesParams&);
  AppendEntriesParams() noexcept
                      : term(0),
                        prevLogIndex(0),
                        prevLogTerm(0),
                        leaderCommit(0),
                        gid(0) {
  }

  virtual ~AppendEntriesParams() noexcept;
  TermId term;
  Host leaderId;
  LogId prevLogIndex;
  TermId prevLogTerm;
  std::vector<LogEntry>  entries;
  LogId leaderCommit;
  GID gid;

  _AppendEntriesParams__isset __isset;

  void __set_term(const TermId val);

  void __set_leaderId(const Host& val);

  void __set_prevLogIndex(const LogId val);

  void __set_prevLogTerm(const TermId val);

  void __set_entries(const std::vector<LogEntry> & val);

  void __set_leaderCommit(const LogId val);

  void __set_gid(const GID val);

  bool operator == (const AppendEntriesParams & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(leaderId == rhs.leaderId))
      return false;
    if (!(prevLogIndex == rhs.prevLogIndex))
      return false;
    if (!(prevLogTerm == rhs.prevLogTerm))
      return false;
    if (!(entries == rhs.entries))
      return false;
    if (!(leaderCommit == rhs.leaderCommit))
      return false;
    if (!(gid == rhs.gid))
      return false;
    return true;
  }
  bool operator != (const AppendEntriesParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendEntriesParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendEntriesParams &a, AppendEntriesParams &b);

std::ostream& operator<<(std::ostream& out, const AppendEntriesParams& obj);

typedef struct _AppendEntriesResult__isset {
  _AppendEntriesResult__isset() : term(false), success(false), code(false) {}
  bool term :1;
  bool success :1;
  bool code :1;
} _AppendEntriesResult__isset;

class AppendEntriesResult : public virtual ::apache::thrift::TBase {
 public:

  AppendEntriesResult(const AppendEntriesResult&) noexcept;
  AppendEntriesResult& operator=(const AppendEntriesResult&) noexcept;
  AppendEntriesResult() noexcept
                      : term(0),
                        success(0),
                        code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~AppendEntriesResult() noexcept;
  TermId term;
  bool success;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _AppendEntriesResult__isset __isset;

  void __set_term(const TermId val);

  void __set_success(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const AppendEntriesResult & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(success == rhs.success))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const AppendEntriesResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AppendEntriesResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(AppendEntriesResult &a, AppendEntriesResult &b);

std::ostream& operator<<(std::ostream& out, const AppendEntriesResult& obj);

typedef struct _RaftState__isset {
  _RaftState__isset() : currentTerm(false), votedFor(false), commitIndex(false), lastApplied(false), state(false), peers(false), logs(false) {}
  bool currentTerm :1;
  bool votedFor :1;
  bool commitIndex :1;
  bool lastApplied :1;
  bool state :1;
  bool peers :1;
  bool logs :1;
} _RaftState__isset;

class RaftState : public virtual ::apache::thrift::TBase {
 public:

  RaftState(const RaftState&);
  RaftState& operator=(const RaftState&);
  RaftState() noexcept
            : currentTerm(0),
              commitIndex(0),
              lastApplied(0),
              state(static_cast<ServerState::type>(0)) {
  }

  virtual ~RaftState() noexcept;
  TermId currentTerm;
  Host votedFor;
  LogId commitIndex;
  LogId lastApplied;
  /**
   * 
   * @see ServerState
   */
  ServerState::type state;
  std::vector<Host>  peers;
  std::vector<LogEntry>  logs;

  _RaftState__isset __isset;

  void __set_currentTerm(const TermId val);

  void __set_votedFor(const Host& val);

  void __set_commitIndex(const LogId val);

  void __set_lastApplied(const LogId val);

  void __set_state(const ServerState::type val);

  void __set_peers(const std::vector<Host> & val);

  void __set_logs(const std::vector<LogEntry> & val);

  bool operator == (const RaftState & rhs) const
  {
    if (!(currentTerm == rhs.currentTerm))
      return false;
    if (!(votedFor == rhs.votedFor))
      return false;
    if (!(commitIndex == rhs.commitIndex))
      return false;
    if (!(lastApplied == rhs.lastApplied))
      return false;
    if (!(state == rhs.state))
      return false;
    if (!(peers == rhs.peers))
      return false;
    if (!(logs == rhs.logs))
      return false;
    return true;
  }
  bool operator != (const RaftState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaftState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RaftState &a, RaftState &b);

std::ostream& operator<<(std::ostream& out, const RaftState& obj);

typedef struct _StartResult__isset {
  _StartResult__isset() : expectedLogIndex(false), term(false), isLeader(false), code(false) {}
  bool expectedLogIndex :1;
  bool term :1;
  bool isLeader :1;
  bool code :1;
} _StartResult__isset;

class StartResult : public virtual ::apache::thrift::TBase {
 public:

  StartResult(const StartResult&) noexcept;
  StartResult& operator=(const StartResult&) noexcept;
  StartResult() noexcept
              : expectedLogIndex(0),
                term(0),
                isLeader(0),
                code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~StartResult() noexcept;
  LogId expectedLogIndex;
  TermId term;
  bool isLeader;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _StartResult__isset __isset;

  void __set_expectedLogIndex(const LogId val);

  void __set_term(const TermId val);

  void __set_isLeader(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const StartResult & rhs) const
  {
    if (!(expectedLogIndex == rhs.expectedLogIndex))
      return false;
    if (!(term == rhs.term))
      return false;
    if (!(isLeader == rhs.isLeader))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const StartResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartResult &a, StartResult &b);

std::ostream& operator<<(std::ostream& out, const StartResult& obj);

typedef struct _PutAppendParams__isset {
  _PutAppendParams__isset() : key(false), value(false), op(false), gid(false), sid(false) {}
  bool key :1;
  bool value :1;
  bool op :1;
  bool gid :1;
  bool sid :1;
} _PutAppendParams__isset;

class PutAppendParams : public virtual ::apache::thrift::TBase {
 public:

  PutAppendParams(const PutAppendParams&);
  PutAppendParams& operator=(const PutAppendParams&);
  PutAppendParams() noexcept
                  : key(),
                    value(),
                    op(static_cast<PutOp::type>(0)),
                    gid(0),
                    sid(0) {
  }

  virtual ~PutAppendParams() noexcept;
  std::string key;
  std::string value;
  /**
   * 
   * @see PutOp
   */
  PutOp::type op;
  GID gid;
  ShardId sid;

  _PutAppendParams__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_op(const PutOp::type val);

  void __set_gid(const GID val);

  void __set_sid(const ShardId val);

  bool operator == (const PutAppendParams & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(gid == rhs.gid))
      return false;
    if (!(sid == rhs.sid))
      return false;
    return true;
  }
  bool operator != (const PutAppendParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutAppendParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutAppendParams &a, PutAppendParams &b);

std::ostream& operator<<(std::ostream& out, const PutAppendParams& obj);

typedef struct _PutAppendReply__isset {
  _PutAppendReply__isset() : code(false) {}
  bool code :1;
} _PutAppendReply__isset;

class PutAppendReply : public virtual ::apache::thrift::TBase {
 public:

  PutAppendReply(const PutAppendReply&) noexcept;
  PutAppendReply& operator=(const PutAppendReply&) noexcept;
  PutAppendReply() noexcept
                 : code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~PutAppendReply() noexcept;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _PutAppendReply__isset __isset;

  void __set_code(const ErrorCode::type val);

  bool operator == (const PutAppendReply & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const PutAppendReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutAppendReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutAppendReply &a, PutAppendReply &b);

std::ostream& operator<<(std::ostream& out, const PutAppendReply& obj);

typedef struct _GetParams__isset {
  _GetParams__isset() : key(false), gid(false), sid(false) {}
  bool key :1;
  bool gid :1;
  bool sid :1;
} _GetParams__isset;

class GetParams : public virtual ::apache::thrift::TBase {
 public:

  GetParams(const GetParams&);
  GetParams& operator=(const GetParams&);
  GetParams() noexcept
            : key(),
              gid(0),
              sid(0) {
  }

  virtual ~GetParams() noexcept;
  std::string key;
  GID gid;
  ShardId sid;

  _GetParams__isset __isset;

  void __set_key(const std::string& val);

  void __set_gid(const GID val);

  void __set_sid(const ShardId val);

  bool operator == (const GetParams & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(gid == rhs.gid))
      return false;
    if (!(sid == rhs.sid))
      return false;
    return true;
  }
  bool operator != (const GetParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetParams &a, GetParams &b);

std::ostream& operator<<(std::ostream& out, const GetParams& obj);

typedef struct _GetReply__isset {
  _GetReply__isset() : code(false), value(false) {}
  bool code :1;
  bool value :1;
} _GetReply__isset;

class GetReply : public virtual ::apache::thrift::TBase {
 public:

  GetReply(const GetReply&);
  GetReply& operator=(const GetReply&);
  GetReply() noexcept
           : code(static_cast<ErrorCode::type>(0)),
             value() {
  }

  virtual ~GetReply() noexcept;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;
  std::string value;

  _GetReply__isset __isset;

  void __set_code(const ErrorCode::type val);

  void __set_value(const std::string& val);

  bool operator == (const GetReply & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const GetReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetReply &a, GetReply &b);

std::ostream& operator<<(std::ostream& out, const GetReply& obj);

typedef struct _InstallSnapshotParams__isset {
  _InstallSnapshotParams__isset() : term(false), leaderId(false), lastIncludedIndex(false), lastIncludedTerm(false), offset(false), data(false), done(false), gid(false) {}
  bool term :1;
  bool leaderId :1;
  bool lastIncludedIndex :1;
  bool lastIncludedTerm :1;
  bool offset :1;
  bool data :1;
  bool done :1;
  bool gid :1;
} _InstallSnapshotParams__isset;

class InstallSnapshotParams : public virtual ::apache::thrift::TBase {
 public:

  InstallSnapshotParams(const InstallSnapshotParams&);
  InstallSnapshotParams& operator=(const InstallSnapshotParams&);
  InstallSnapshotParams() noexcept
                        : term(0),
                          lastIncludedIndex(0),
                          lastIncludedTerm(0),
                          offset(0),
                          data(),
                          done(0),
                          gid(0) {
  }

  virtual ~InstallSnapshotParams() noexcept;
  TermId term;
  Host leaderId;
  LogId lastIncludedIndex;
  TermId lastIncludedTerm;
  int32_t offset;
  std::string data;
  bool done;
  GID gid;

  _InstallSnapshotParams__isset __isset;

  void __set_term(const TermId val);

  void __set_leaderId(const Host& val);

  void __set_lastIncludedIndex(const LogId val);

  void __set_lastIncludedTerm(const TermId val);

  void __set_offset(const int32_t val);

  void __set_data(const std::string& val);

  void __set_done(const bool val);

  void __set_gid(const GID val);

  bool operator == (const InstallSnapshotParams & rhs) const
  {
    if (!(term == rhs.term))
      return false;
    if (!(leaderId == rhs.leaderId))
      return false;
    if (!(lastIncludedIndex == rhs.lastIncludedIndex))
      return false;
    if (!(lastIncludedTerm == rhs.lastIncludedTerm))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(done == rhs.done))
      return false;
    if (!(gid == rhs.gid))
      return false;
    return true;
  }
  bool operator != (const InstallSnapshotParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstallSnapshotParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(InstallSnapshotParams &a, InstallSnapshotParams &b);

std::ostream& operator<<(std::ostream& out, const InstallSnapshotParams& obj);

typedef struct _JoinArgs__isset {
  _JoinArgs__isset() : servers(false) {}
  bool servers :1;
} _JoinArgs__isset;

class JoinArgs : public virtual ::apache::thrift::TBase {
 public:

  JoinArgs(const JoinArgs&);
  JoinArgs& operator=(const JoinArgs&);
  JoinArgs() noexcept {
  }

  virtual ~JoinArgs() noexcept;
  std::map<GID, std::vector<Host> >  servers;

  _JoinArgs__isset __isset;

  void __set_servers(const std::map<GID, std::vector<Host> > & val);

  bool operator == (const JoinArgs & rhs) const
  {
    if (!(servers == rhs.servers))
      return false;
    return true;
  }
  bool operator != (const JoinArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinArgs &a, JoinArgs &b);

std::ostream& operator<<(std::ostream& out, const JoinArgs& obj);

typedef struct _JoinReply__isset {
  _JoinReply__isset() : wrongLeader(false), code(false) {}
  bool wrongLeader :1;
  bool code :1;
} _JoinReply__isset;

class JoinReply : public virtual ::apache::thrift::TBase {
 public:

  JoinReply(const JoinReply&) noexcept;
  JoinReply& operator=(const JoinReply&) noexcept;
  JoinReply() noexcept
            : wrongLeader(0),
              code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~JoinReply() noexcept;
  bool wrongLeader;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _JoinReply__isset __isset;

  void __set_wrongLeader(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const JoinReply & rhs) const
  {
    if (!(wrongLeader == rhs.wrongLeader))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const JoinReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinReply &a, JoinReply &b);

std::ostream& operator<<(std::ostream& out, const JoinReply& obj);

typedef struct _LeaveArgs__isset {
  _LeaveArgs__isset() : gids(false) {}
  bool gids :1;
} _LeaveArgs__isset;

class LeaveArgs : public virtual ::apache::thrift::TBase {
 public:

  LeaveArgs(const LeaveArgs&);
  LeaveArgs& operator=(const LeaveArgs&);
  LeaveArgs() noexcept {
  }

  virtual ~LeaveArgs() noexcept;
  std::vector<GID>  gids;

  _LeaveArgs__isset __isset;

  void __set_gids(const std::vector<GID> & val);

  bool operator == (const LeaveArgs & rhs) const
  {
    if (!(gids == rhs.gids))
      return false;
    return true;
  }
  bool operator != (const LeaveArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveArgs &a, LeaveArgs &b);

std::ostream& operator<<(std::ostream& out, const LeaveArgs& obj);

typedef struct _LeaveReply__isset {
  _LeaveReply__isset() : wrongLeader(false), code(false) {}
  bool wrongLeader :1;
  bool code :1;
} _LeaveReply__isset;

class LeaveReply : public virtual ::apache::thrift::TBase {
 public:

  LeaveReply(const LeaveReply&) noexcept;
  LeaveReply& operator=(const LeaveReply&) noexcept;
  LeaveReply() noexcept
             : wrongLeader(0),
               code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~LeaveReply() noexcept;
  bool wrongLeader;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _LeaveReply__isset __isset;

  void __set_wrongLeader(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const LeaveReply & rhs) const
  {
    if (!(wrongLeader == rhs.wrongLeader))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const LeaveReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LeaveReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(LeaveReply &a, LeaveReply &b);

std::ostream& operator<<(std::ostream& out, const LeaveReply& obj);

typedef struct _MoveArgs__isset {
  _MoveArgs__isset() : shard(false), gid(false) {}
  bool shard :1;
  bool gid :1;
} _MoveArgs__isset;

class MoveArgs : public virtual ::apache::thrift::TBase {
 public:

  MoveArgs(const MoveArgs&) noexcept;
  MoveArgs& operator=(const MoveArgs&) noexcept;
  MoveArgs() noexcept
           : shard(0),
             gid(0) {
  }

  virtual ~MoveArgs() noexcept;
  ShardId shard;
  GID gid;

  _MoveArgs__isset __isset;

  void __set_shard(const ShardId val);

  void __set_gid(const GID val);

  bool operator == (const MoveArgs & rhs) const
  {
    if (!(shard == rhs.shard))
      return false;
    if (!(gid == rhs.gid))
      return false;
    return true;
  }
  bool operator != (const MoveArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MoveArgs &a, MoveArgs &b);

std::ostream& operator<<(std::ostream& out, const MoveArgs& obj);

typedef struct _MoveReply__isset {
  _MoveReply__isset() : wrongLeader(false), code(false) {}
  bool wrongLeader :1;
  bool code :1;
} _MoveReply__isset;

class MoveReply : public virtual ::apache::thrift::TBase {
 public:

  MoveReply(const MoveReply&) noexcept;
  MoveReply& operator=(const MoveReply&) noexcept;
  MoveReply() noexcept
            : wrongLeader(0),
              code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~MoveReply() noexcept;
  bool wrongLeader;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _MoveReply__isset __isset;

  void __set_wrongLeader(const bool val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const MoveReply & rhs) const
  {
    if (!(wrongLeader == rhs.wrongLeader))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const MoveReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MoveReply &a, MoveReply &b);

std::ostream& operator<<(std::ostream& out, const MoveReply& obj);

typedef struct _QueryArgs__isset {
  _QueryArgs__isset() : configNum(false) {}
  bool configNum :1;
} _QueryArgs__isset;

class QueryArgs : public virtual ::apache::thrift::TBase {
 public:

  QueryArgs(const QueryArgs&) noexcept;
  QueryArgs& operator=(const QueryArgs&) noexcept;
  QueryArgs() noexcept
            : configNum(0) {
  }

  virtual ~QueryArgs() noexcept;
  int32_t configNum;

  _QueryArgs__isset __isset;

  void __set_configNum(const int32_t val);

  bool operator == (const QueryArgs & rhs) const
  {
    if (!(configNum == rhs.configNum))
      return false;
    return true;
  }
  bool operator != (const QueryArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryArgs &a, QueryArgs &b);

std::ostream& operator<<(std::ostream& out, const QueryArgs& obj);

typedef struct _Config__isset {
  _Config__isset() : configNum(false), shard2gid(false), gid2shards(false), groupHosts(false) {}
  bool configNum :1;
  bool shard2gid :1;
  bool gid2shards :1;
  bool groupHosts :1;
} _Config__isset;

class Config : public virtual ::apache::thrift::TBase {
 public:

  Config(const Config&);
  Config& operator=(const Config&);
  Config() noexcept
         : configNum(0) {
  }

  virtual ~Config() noexcept;
  int32_t configNum;
  std::vector<GID>  shard2gid;
  std::map<GID, std::set<ShardId> >  gid2shards;
  std::map<GID, std::vector<Host> >  groupHosts;

  _Config__isset __isset;

  void __set_configNum(const int32_t val);

  void __set_shard2gid(const std::vector<GID> & val);

  void __set_gid2shards(const std::map<GID, std::set<ShardId> > & val);

  void __set_groupHosts(const std::map<GID, std::vector<Host> > & val);

  bool operator == (const Config & rhs) const
  {
    if (!(configNum == rhs.configNum))
      return false;
    if (!(shard2gid == rhs.shard2gid))
      return false;
    if (!(gid2shards == rhs.gid2shards))
      return false;
    if (!(groupHosts == rhs.groupHosts))
      return false;
    return true;
  }
  bool operator != (const Config &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Config & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Config &a, Config &b);

std::ostream& operator<<(std::ostream& out, const Config& obj);

typedef struct _QueryReply__isset {
  _QueryReply__isset() : wrongLeader(false), config(false), code(false) {}
  bool wrongLeader :1;
  bool config :1;
  bool code :1;
} _QueryReply__isset;

class QueryReply : public virtual ::apache::thrift::TBase {
 public:

  QueryReply(const QueryReply&);
  QueryReply& operator=(const QueryReply&);
  QueryReply() noexcept
             : wrongLeader(0),
               code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~QueryReply() noexcept;
  bool wrongLeader;
  Config config;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _QueryReply__isset __isset;

  void __set_wrongLeader(const bool val);

  void __set_config(const Config& val);

  void __set_code(const ErrorCode::type val);

  bool operator == (const QueryReply & rhs) const
  {
    if (!(wrongLeader == rhs.wrongLeader))
      return false;
    if (!(config == rhs.config))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const QueryReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryReply &a, QueryReply &b);

std::ostream& operator<<(std::ostream& out, const QueryReply& obj);

typedef struct _PullShardParams__isset {
  _PullShardParams__isset() : id(false) {}
  bool id :1;
} _PullShardParams__isset;

class PullShardParams : public virtual ::apache::thrift::TBase {
 public:

  PullShardParams(const PullShardParams&) noexcept;
  PullShardParams& operator=(const PullShardParams&) noexcept;
  PullShardParams() noexcept
                  : id(0) {
  }

  virtual ~PullShardParams() noexcept;
  ShardId id;

  _PullShardParams__isset __isset;

  void __set_id(const ShardId val);

  bool operator == (const PullShardParams & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PullShardParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PullShardParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PullShardParams &a, PullShardParams &b);

std::ostream& operator<<(std::ostream& out, const PullShardParams& obj);

typedef struct _PullShardReply__isset {
  _PullShardReply__isset() : code(false) {}
  bool code :1;
} _PullShardReply__isset;

class PullShardReply : public virtual ::apache::thrift::TBase {
 public:

  PullShardReply(const PullShardReply&) noexcept;
  PullShardReply& operator=(const PullShardReply&) noexcept;
  PullShardReply() noexcept
                 : code(static_cast<ErrorCode::type>(0)) {
  }

  virtual ~PullShardReply() noexcept;
  /**
   * 
   * @see ErrorCode
   */
  ErrorCode::type code;

  _PullShardReply__isset __isset;

  void __set_code(const ErrorCode::type val);

  bool operator == (const PullShardReply & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const PullShardReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PullShardReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PullShardReply &a, PullShardReply &b);

std::ostream& operator<<(std::ostream& out, const PullShardReply& obj);



#endif
