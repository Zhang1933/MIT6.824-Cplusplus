/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ShardCtrler_H
#define ShardCtrler_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "KVRaft_types.h"
#include "Raft.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ShardCtrlerIf : virtual public RaftIf {
 public:
  virtual ~ShardCtrlerIf() {}
  virtual void join(JoinReply& _return, const JoinArgs& jargs) = 0;
  virtual void leave(LeaveReply& _return, const LeaveArgs& largs) = 0;
  virtual void move(MoveReply& _return, const MoveArgs& margs) = 0;
  virtual void query(QueryReply& _return, const QueryArgs& qargs) = 0;
};

class ShardCtrlerIfFactory : virtual public RaftIfFactory {
 public:
  typedef ShardCtrlerIf Handler;

  virtual ~ShardCtrlerIfFactory() {}

  virtual ShardCtrlerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler(RaftIf* /* handler */) override = 0;
  };

class ShardCtrlerIfSingletonFactory : virtual public ShardCtrlerIfFactory {
 public:
  ShardCtrlerIfSingletonFactory(const ::std::shared_ptr<ShardCtrlerIf>& iface) : iface_(iface) {}
  virtual ~ShardCtrlerIfSingletonFactory() {}

  virtual ShardCtrlerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(RaftIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ShardCtrlerIf> iface_;
};

class ShardCtrlerNull : virtual public ShardCtrlerIf , virtual public RaftNull {
 public:
  virtual ~ShardCtrlerNull() {}
  void join(JoinReply& /* _return */, const JoinArgs& /* jargs */) override {
    return;
  }
  void leave(LeaveReply& /* _return */, const LeaveArgs& /* largs */) override {
    return;
  }
  void move(MoveReply& /* _return */, const MoveArgs& /* margs */) override {
    return;
  }
  void query(QueryReply& /* _return */, const QueryArgs& /* qargs */) override {
    return;
  }
};

typedef struct _ShardCtrler_join_args__isset {
  _ShardCtrler_join_args__isset() : jargs(false) {}
  bool jargs :1;
} _ShardCtrler_join_args__isset;

class ShardCtrler_join_args {
 public:

  ShardCtrler_join_args(const ShardCtrler_join_args&);
  ShardCtrler_join_args& operator=(const ShardCtrler_join_args&);
  ShardCtrler_join_args() noexcept {
  }

  virtual ~ShardCtrler_join_args() noexcept;
  JoinArgs jargs;

  _ShardCtrler_join_args__isset __isset;

  void __set_jargs(const JoinArgs& val);

  bool operator == (const ShardCtrler_join_args & rhs) const
  {
    if (!(jargs == rhs.jargs))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShardCtrler_join_pargs {
 public:


  virtual ~ShardCtrler_join_pargs() noexcept;
  const JoinArgs* jargs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_join_result__isset {
  _ShardCtrler_join_result__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_join_result__isset;

class ShardCtrler_join_result {
 public:

  ShardCtrler_join_result(const ShardCtrler_join_result&) noexcept;
  ShardCtrler_join_result& operator=(const ShardCtrler_join_result&) noexcept;
  ShardCtrler_join_result() noexcept {
  }

  virtual ~ShardCtrler_join_result() noexcept;
  JoinReply success;

  _ShardCtrler_join_result__isset __isset;

  void __set_success(const JoinReply& val);

  bool operator == (const ShardCtrler_join_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_join_presult__isset {
  _ShardCtrler_join_presult__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_join_presult__isset;

class ShardCtrler_join_presult {
 public:


  virtual ~ShardCtrler_join_presult() noexcept;
  JoinReply* success;

  _ShardCtrler_join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShardCtrler_leave_args__isset {
  _ShardCtrler_leave_args__isset() : largs(false) {}
  bool largs :1;
} _ShardCtrler_leave_args__isset;

class ShardCtrler_leave_args {
 public:

  ShardCtrler_leave_args(const ShardCtrler_leave_args&);
  ShardCtrler_leave_args& operator=(const ShardCtrler_leave_args&);
  ShardCtrler_leave_args() noexcept {
  }

  virtual ~ShardCtrler_leave_args() noexcept;
  LeaveArgs largs;

  _ShardCtrler_leave_args__isset __isset;

  void __set_largs(const LeaveArgs& val);

  bool operator == (const ShardCtrler_leave_args & rhs) const
  {
    if (!(largs == rhs.largs))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_leave_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_leave_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShardCtrler_leave_pargs {
 public:


  virtual ~ShardCtrler_leave_pargs() noexcept;
  const LeaveArgs* largs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_leave_result__isset {
  _ShardCtrler_leave_result__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_leave_result__isset;

class ShardCtrler_leave_result {
 public:

  ShardCtrler_leave_result(const ShardCtrler_leave_result&) noexcept;
  ShardCtrler_leave_result& operator=(const ShardCtrler_leave_result&) noexcept;
  ShardCtrler_leave_result() noexcept {
  }

  virtual ~ShardCtrler_leave_result() noexcept;
  LeaveReply success;

  _ShardCtrler_leave_result__isset __isset;

  void __set_success(const LeaveReply& val);

  bool operator == (const ShardCtrler_leave_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_leave_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_leave_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_leave_presult__isset {
  _ShardCtrler_leave_presult__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_leave_presult__isset;

class ShardCtrler_leave_presult {
 public:


  virtual ~ShardCtrler_leave_presult() noexcept;
  LeaveReply* success;

  _ShardCtrler_leave_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShardCtrler_move_args__isset {
  _ShardCtrler_move_args__isset() : margs(false) {}
  bool margs :1;
} _ShardCtrler_move_args__isset;

class ShardCtrler_move_args {
 public:

  ShardCtrler_move_args(const ShardCtrler_move_args&) noexcept;
  ShardCtrler_move_args& operator=(const ShardCtrler_move_args&) noexcept;
  ShardCtrler_move_args() noexcept {
  }

  virtual ~ShardCtrler_move_args() noexcept;
  MoveArgs margs;

  _ShardCtrler_move_args__isset __isset;

  void __set_margs(const MoveArgs& val);

  bool operator == (const ShardCtrler_move_args & rhs) const
  {
    if (!(margs == rhs.margs))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_move_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_move_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShardCtrler_move_pargs {
 public:


  virtual ~ShardCtrler_move_pargs() noexcept;
  const MoveArgs* margs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_move_result__isset {
  _ShardCtrler_move_result__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_move_result__isset;

class ShardCtrler_move_result {
 public:

  ShardCtrler_move_result(const ShardCtrler_move_result&) noexcept;
  ShardCtrler_move_result& operator=(const ShardCtrler_move_result&) noexcept;
  ShardCtrler_move_result() noexcept {
  }

  virtual ~ShardCtrler_move_result() noexcept;
  MoveReply success;

  _ShardCtrler_move_result__isset __isset;

  void __set_success(const MoveReply& val);

  bool operator == (const ShardCtrler_move_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_move_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_move_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_move_presult__isset {
  _ShardCtrler_move_presult__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_move_presult__isset;

class ShardCtrler_move_presult {
 public:


  virtual ~ShardCtrler_move_presult() noexcept;
  MoveReply* success;

  _ShardCtrler_move_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ShardCtrler_query_args__isset {
  _ShardCtrler_query_args__isset() : qargs(false) {}
  bool qargs :1;
} _ShardCtrler_query_args__isset;

class ShardCtrler_query_args {
 public:

  ShardCtrler_query_args(const ShardCtrler_query_args&) noexcept;
  ShardCtrler_query_args& operator=(const ShardCtrler_query_args&) noexcept;
  ShardCtrler_query_args() noexcept {
  }

  virtual ~ShardCtrler_query_args() noexcept;
  QueryArgs qargs;

  _ShardCtrler_query_args__isset __isset;

  void __set_qargs(const QueryArgs& val);

  bool operator == (const ShardCtrler_query_args & rhs) const
  {
    if (!(qargs == rhs.qargs))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ShardCtrler_query_pargs {
 public:


  virtual ~ShardCtrler_query_pargs() noexcept;
  const QueryArgs* qargs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_query_result__isset {
  _ShardCtrler_query_result__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_query_result__isset;

class ShardCtrler_query_result {
 public:

  ShardCtrler_query_result(const ShardCtrler_query_result&);
  ShardCtrler_query_result& operator=(const ShardCtrler_query_result&);
  ShardCtrler_query_result() noexcept {
  }

  virtual ~ShardCtrler_query_result() noexcept;
  QueryReply success;

  _ShardCtrler_query_result__isset __isset;

  void __set_success(const QueryReply& val);

  bool operator == (const ShardCtrler_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ShardCtrler_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShardCtrler_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ShardCtrler_query_presult__isset {
  _ShardCtrler_query_presult__isset() : success(false) {}
  bool success :1;
} _ShardCtrler_query_presult__isset;

class ShardCtrler_query_presult {
 public:


  virtual ~ShardCtrler_query_presult() noexcept;
  QueryReply* success;

  _ShardCtrler_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ShardCtrlerClient : virtual public ShardCtrlerIf, public RaftClient {
 public:
  ShardCtrlerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    RaftClient(prot, prot) {}
  ShardCtrlerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    RaftClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void join(JoinReply& _return, const JoinArgs& jargs) override;
  void send_join(const JoinArgs& jargs);
  void recv_join(JoinReply& _return);
  void leave(LeaveReply& _return, const LeaveArgs& largs) override;
  void send_leave(const LeaveArgs& largs);
  void recv_leave(LeaveReply& _return);
  void move(MoveReply& _return, const MoveArgs& margs) override;
  void send_move(const MoveArgs& margs);
  void recv_move(MoveReply& _return);
  void query(QueryReply& _return, const QueryArgs& qargs) override;
  void send_query(const QueryArgs& qargs);
  void recv_query(QueryReply& _return);
};

class ShardCtrlerProcessor : public RaftProcessor {
 protected:
  ::std::shared_ptr<ShardCtrlerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ShardCtrlerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_leave(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_move(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ShardCtrlerProcessor(::std::shared_ptr<ShardCtrlerIf> iface) :
    RaftProcessor(iface),
    iface_(iface) {
    processMap_["join"] = &ShardCtrlerProcessor::process_join;
    processMap_["leave"] = &ShardCtrlerProcessor::process_leave;
    processMap_["move"] = &ShardCtrlerProcessor::process_move;
    processMap_["query"] = &ShardCtrlerProcessor::process_query;
  }

  virtual ~ShardCtrlerProcessor() {}
};

class ShardCtrlerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ShardCtrlerProcessorFactory(const ::std::shared_ptr< ShardCtrlerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ShardCtrlerIfFactory > handlerFactory_;
};

class ShardCtrlerMultiface : virtual public ShardCtrlerIf, public RaftMultiface {
 public:
  ShardCtrlerMultiface(std::vector<std::shared_ptr<ShardCtrlerIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<ShardCtrlerIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      RaftMultiface::add(*iter);
    }
  }
  virtual ~ShardCtrlerMultiface() {}
 protected:
  std::vector<std::shared_ptr<ShardCtrlerIf> > ifaces_;
  ShardCtrlerMultiface() {}
  void add(::std::shared_ptr<ShardCtrlerIf> iface) {
    RaftMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void join(JoinReply& _return, const JoinArgs& jargs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->join(_return, jargs);
    }
    ifaces_[i]->join(_return, jargs);
    return;
  }

  void leave(LeaveReply& _return, const LeaveArgs& largs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->leave(_return, largs);
    }
    ifaces_[i]->leave(_return, largs);
    return;
  }

  void move(MoveReply& _return, const MoveArgs& margs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->move(_return, margs);
    }
    ifaces_[i]->move(_return, margs);
    return;
  }

  void query(QueryReply& _return, const QueryArgs& qargs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, qargs);
    }
    ifaces_[i]->query(_return, qargs);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ShardCtrlerConcurrentClient : virtual public ShardCtrlerIf, public RaftConcurrentClient {
 public:
  ShardCtrlerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    RaftConcurrentClient(prot, prot, sync) {}
  ShardCtrlerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    RaftConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void join(JoinReply& _return, const JoinArgs& jargs) override;
  int32_t send_join(const JoinArgs& jargs);
  void recv_join(JoinReply& _return, const int32_t seqid);
  void leave(LeaveReply& _return, const LeaveArgs& largs) override;
  int32_t send_leave(const LeaveArgs& largs);
  void recv_leave(LeaveReply& _return, const int32_t seqid);
  void move(MoveReply& _return, const MoveArgs& margs) override;
  int32_t send_move(const MoveArgs& margs);
  void recv_move(MoveReply& _return, const int32_t seqid);
  void query(QueryReply& _return, const QueryArgs& qargs) override;
  int32_t send_query(const QueryArgs& qargs);
  void recv_query(QueryReply& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
