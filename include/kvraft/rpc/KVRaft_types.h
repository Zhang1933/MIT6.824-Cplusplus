/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KVRaft_TYPES_H
#define KVRaft_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct PutOp {
  enum type {
    PUT = 0,
    APPEND = 1
  };
};

extern const std::map<int, const char*> _PutOp_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PutOp::type& val);

std::string to_string(const PutOp::type& val);

struct KVStatus {
  enum type {
    OK = 0,
    ERR_NO_KEY = 1,
    ERR_WRONG_LEADER = 2
  };
};

extern const std::map<int, const char*> _KVStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const KVStatus::type& val);

std::string to_string(const KVStatus::type& val);

class PutAppendArgs;

class PutAppenRely;

class GetArgs;

class GetReply;

typedef struct _PutAppendArgs__isset {
  _PutAppendArgs__isset() : key(false), value(false), op(false) {}
  bool key :1;
  bool value :1;
  bool op :1;
} _PutAppendArgs__isset;

class PutAppendArgs : public virtual ::apache::thrift::TBase {
 public:

  PutAppendArgs(const PutAppendArgs&);
  PutAppendArgs& operator=(const PutAppendArgs&);
  PutAppendArgs() noexcept
                : key(),
                  value(),
                  op(static_cast<PutOp::type>(0)) {
  }

  virtual ~PutAppendArgs() noexcept;
  std::string key;
  std::string value;
  /**
   * 
   * @see PutOp
   */
  PutOp::type op;

  _PutAppendArgs__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  void __set_op(const PutOp::type val);

  bool operator == (const PutAppendArgs & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(op == rhs.op))
      return false;
    return true;
  }
  bool operator != (const PutAppendArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutAppendArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutAppendArgs &a, PutAppendArgs &b);

std::ostream& operator<<(std::ostream& out, const PutAppendArgs& obj);

typedef struct _PutAppenRely__isset {
  _PutAppenRely__isset() : status(false) {}
  bool status :1;
} _PutAppenRely__isset;

class PutAppenRely : public virtual ::apache::thrift::TBase {
 public:

  PutAppenRely(const PutAppenRely&) noexcept;
  PutAppenRely& operator=(const PutAppenRely&) noexcept;
  PutAppenRely() noexcept
               : status(static_cast<KVStatus::type>(0)) {
  }

  virtual ~PutAppenRely() noexcept;
  /**
   * 
   * @see KVStatus
   */
  KVStatus::type status;

  _PutAppenRely__isset __isset;

  void __set_status(const KVStatus::type val);

  bool operator == (const PutAppenRely & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const PutAppenRely &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PutAppenRely & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PutAppenRely &a, PutAppenRely &b);

std::ostream& operator<<(std::ostream& out, const PutAppenRely& obj);

typedef struct _GetArgs__isset {
  _GetArgs__isset() : key(false) {}
  bool key :1;
} _GetArgs__isset;

class GetArgs : public virtual ::apache::thrift::TBase {
 public:

  GetArgs(const GetArgs&);
  GetArgs& operator=(const GetArgs&);
  GetArgs() noexcept
          : key() {
  }

  virtual ~GetArgs() noexcept;
  std::string key;

  _GetArgs__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const GetArgs & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const GetArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetArgs &a, GetArgs &b);

std::ostream& operator<<(std::ostream& out, const GetArgs& obj);

typedef struct _GetReply__isset {
  _GetReply__isset() : status(false), value(false) {}
  bool status :1;
  bool value :1;
} _GetReply__isset;

class GetReply : public virtual ::apache::thrift::TBase {
 public:

  GetReply(const GetReply&);
  GetReply& operator=(const GetReply&);
  GetReply() noexcept
           : status(static_cast<KVStatus::type>(0)),
             value() {
  }

  virtual ~GetReply() noexcept;
  /**
   * 
   * @see KVStatus
   */
  KVStatus::type status;
  std::string value;

  _GetReply__isset __isset;

  void __set_status(const KVStatus::type val);

  void __set_value(const std::string& val);

  bool operator == (const GetReply & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const GetReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetReply &a, GetReply &b);

std::ostream& operator<<(std::ostream& out, const GetReply& obj);



#endif
