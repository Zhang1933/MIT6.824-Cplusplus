/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KVRaft_H
#define KVRaft_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "KVRaft_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class KVRaftIf {
 public:
  virtual ~KVRaftIf() {}
  virtual void putAppend(PutAppenRely& _return, const PutAppendArgs& args) = 0;
  virtual void get(GetReply& _return, const GetArgs& args) = 0;
};

class KVRaftIfFactory {
 public:
  typedef KVRaftIf Handler;

  virtual ~KVRaftIfFactory() {}

  virtual KVRaftIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(KVRaftIf* /* handler */) = 0;
  };

class KVRaftIfSingletonFactory : virtual public KVRaftIfFactory {
 public:
  KVRaftIfSingletonFactory(const ::std::shared_ptr<KVRaftIf>& iface) : iface_(iface) {}
  virtual ~KVRaftIfSingletonFactory() {}

  virtual KVRaftIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(KVRaftIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<KVRaftIf> iface_;
};

class KVRaftNull : virtual public KVRaftIf {
 public:
  virtual ~KVRaftNull() {}
  void putAppend(PutAppenRely& /* _return */, const PutAppendArgs& /* args */) override {
    return;
  }
  void get(GetReply& /* _return */, const GetArgs& /* args */) override {
    return;
  }
};

typedef struct _KVRaft_putAppend_args__isset {
  _KVRaft_putAppend_args__isset() : args(false) {}
  bool args :1;
} _KVRaft_putAppend_args__isset;

class KVRaft_putAppend_args {
 public:

  KVRaft_putAppend_args(const KVRaft_putAppend_args&);
  KVRaft_putAppend_args& operator=(const KVRaft_putAppend_args&);
  KVRaft_putAppend_args() noexcept {
  }

  virtual ~KVRaft_putAppend_args() noexcept;
  PutAppendArgs args;

  _KVRaft_putAppend_args__isset __isset;

  void __set_args(const PutAppendArgs& val);

  bool operator == (const KVRaft_putAppend_args & rhs) const
  {
    if (!(args == rhs.args))
      return false;
    return true;
  }
  bool operator != (const KVRaft_putAppend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVRaft_putAppend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVRaft_putAppend_pargs {
 public:


  virtual ~KVRaft_putAppend_pargs() noexcept;
  const PutAppendArgs* args;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVRaft_putAppend_result__isset {
  _KVRaft_putAppend_result__isset() : success(false) {}
  bool success :1;
} _KVRaft_putAppend_result__isset;

class KVRaft_putAppend_result {
 public:

  KVRaft_putAppend_result(const KVRaft_putAppend_result&) noexcept;
  KVRaft_putAppend_result& operator=(const KVRaft_putAppend_result&) noexcept;
  KVRaft_putAppend_result() noexcept {
  }

  virtual ~KVRaft_putAppend_result() noexcept;
  PutAppenRely success;

  _KVRaft_putAppend_result__isset __isset;

  void __set_success(const PutAppenRely& val);

  bool operator == (const KVRaft_putAppend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVRaft_putAppend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVRaft_putAppend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVRaft_putAppend_presult__isset {
  _KVRaft_putAppend_presult__isset() : success(false) {}
  bool success :1;
} _KVRaft_putAppend_presult__isset;

class KVRaft_putAppend_presult {
 public:


  virtual ~KVRaft_putAppend_presult() noexcept;
  PutAppenRely* success;

  _KVRaft_putAppend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVRaft_get_args__isset {
  _KVRaft_get_args__isset() : args(false) {}
  bool args :1;
} _KVRaft_get_args__isset;

class KVRaft_get_args {
 public:

  KVRaft_get_args(const KVRaft_get_args&);
  KVRaft_get_args& operator=(const KVRaft_get_args&);
  KVRaft_get_args() noexcept {
  }

  virtual ~KVRaft_get_args() noexcept;
  GetArgs args;

  _KVRaft_get_args__isset __isset;

  void __set_args(const GetArgs& val);

  bool operator == (const KVRaft_get_args & rhs) const
  {
    if (!(args == rhs.args))
      return false;
    return true;
  }
  bool operator != (const KVRaft_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVRaft_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVRaft_get_pargs {
 public:


  virtual ~KVRaft_get_pargs() noexcept;
  const GetArgs* args;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVRaft_get_result__isset {
  _KVRaft_get_result__isset() : success(false) {}
  bool success :1;
} _KVRaft_get_result__isset;

class KVRaft_get_result {
 public:

  KVRaft_get_result(const KVRaft_get_result&);
  KVRaft_get_result& operator=(const KVRaft_get_result&);
  KVRaft_get_result() noexcept {
  }

  virtual ~KVRaft_get_result() noexcept;
  GetReply success;

  _KVRaft_get_result__isset __isset;

  void __set_success(const GetReply& val);

  bool operator == (const KVRaft_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVRaft_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVRaft_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVRaft_get_presult__isset {
  _KVRaft_get_presult__isset() : success(false) {}
  bool success :1;
} _KVRaft_get_presult__isset;

class KVRaft_get_presult {
 public:


  virtual ~KVRaft_get_presult() noexcept;
  GetReply* success;

  _KVRaft_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class KVRaftClient : virtual public KVRaftIf {
 public:
  KVRaftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  KVRaftClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putAppend(PutAppenRely& _return, const PutAppendArgs& args) override;
  void send_putAppend(const PutAppendArgs& args);
  void recv_putAppend(PutAppenRely& _return);
  void get(GetReply& _return, const GetArgs& args) override;
  void send_get(const GetArgs& args);
  void recv_get(GetReply& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KVRaftProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<KVRaftIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (KVRaftProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_putAppend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KVRaftProcessor(::std::shared_ptr<KVRaftIf> iface) :
    iface_(iface) {
    processMap_["putAppend"] = &KVRaftProcessor::process_putAppend;
    processMap_["get"] = &KVRaftProcessor::process_get;
  }

  virtual ~KVRaftProcessor() {}
};

class KVRaftProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  KVRaftProcessorFactory(const ::std::shared_ptr< KVRaftIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< KVRaftIfFactory > handlerFactory_;
};

class KVRaftMultiface : virtual public KVRaftIf {
 public:
  KVRaftMultiface(std::vector<std::shared_ptr<KVRaftIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KVRaftMultiface() {}
 protected:
  std::vector<std::shared_ptr<KVRaftIf> > ifaces_;
  KVRaftMultiface() {}
  void add(::std::shared_ptr<KVRaftIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void putAppend(PutAppenRely& _return, const PutAppendArgs& args) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putAppend(_return, args);
    }
    ifaces_[i]->putAppend(_return, args);
    return;
  }

  void get(GetReply& _return, const GetArgs& args) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, args);
    }
    ifaces_[i]->get(_return, args);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class KVRaftConcurrentClient : virtual public KVRaftIf {
 public:
  KVRaftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  KVRaftConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putAppend(PutAppenRely& _return, const PutAppendArgs& args) override;
  int32_t send_putAppend(const PutAppendArgs& args);
  void recv_putAppend(PutAppenRely& _return, const int32_t seqid);
  void get(GetReply& _return, const GetArgs& args) override;
  int32_t send_get(const GetArgs& args);
  void recv_get(GetReply& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
